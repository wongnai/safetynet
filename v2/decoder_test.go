package safetynet_test

import (
	"github.com/stretchr/testify/assert"
	"github.com/wongnai/safetynet/v2"
	"testing"
	"time"
)

var safetynetJws = "eyJhbGciOiJSUzI1NiIsIng1YyI6WyJNSUlGa2pDQ0JIcWdBd0lCQWdJUVJYcm9OMFpPZFJrQkFBQUFBQVB1bnpBTkJna3Foa2lHOXcwQkFRc0ZBREJDTVFzd0NRWURWUVFHRXdKVlV6RWVNQndHQTFVRUNoTVZSMjl2WjJ4bElGUnlkWE4wSUZObGNuWnBZMlZ6TVJNd0VRWURWUVFERXdwSFZGTWdRMEVnTVU4eE1CNFhEVEU0TVRBeE1EQTNNVGswTlZvWERURTVNVEF3T1RBM01UazBOVm93YkRFTE1Ba0dBMVVFQmhNQ1ZWTXhFekFSQmdOVkJBZ1RDa05oYkdsbWIzSnVhV0V4RmpBVUJnTlZCQWNURFUxdmRXNTBZV2x1SUZacFpYY3hFekFSQmdOVkJBb1RDa2R2YjJkc1pTQk1URU14R3pBWkJnTlZCQU1URW1GMGRHVnpkQzVoYm1SeWIybGtMbU52YlRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTmpYa3owZUsxU0U0bSsvRzV3T28rWEdTRUNycWRuODhzQ3BSN2ZzMTRmSzBSaDNaQ1laTEZIcUJrNkFtWlZ3Mks5RkcwTzlyUlBlUURJVlJ5RTMwUXVuUzl1Z0hDNGVnOW92dk9tK1FkWjJwOTNYaHp1blFFaFVXWEN4QURJRUdKSzNTMmFBZnplOTlQTFMyOWhMY1F1WVhIRGFDN09acU5ub3NpT0dpZnM4djFqaTZIL3hobHRDWmUybEorN0d1dHpleEtweHZwRS90WlNmYlk5MDVxU2xCaDlmcGowMTVjam5RRmtVc0FVd21LVkFVdWVVejR0S2NGSzRwZXZOTGF4RUFsK09raWxNdElZRGFjRDVuZWw0eEppeXM0MTNoYWdxVzBXaGg1RlAzOWhHazlFL0J3UVRqYXpTeEdkdlgwbTZ4RlloaC8yVk15WmpUNEt6UEpFQ0F3RUFBYU9DQWxnd2dnSlVNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBVEFNQmdOVkhSTUJBZjhFQWpBQU1CMEdBMVVkRGdRV0JCUXFCUXdHV29KQmExb1RLcXVwbzRXNnhUNmoyREFmQmdOVkhTTUVHREFXZ0JTWTBmaHVFT3ZQbSt4Z254aVFHNkRyZlFuOUt6QmtCZ2dyQmdFRkJRY0JBUVJZTUZZd0p3WUlLd1lCQlFVSE1BR0dHMmgwZEhBNkx5OXZZM053TG5CcmFTNW5iMjluTDJkMGN6RnZNVEFyQmdnckJnRUZCUWN3QW9ZZmFIUjBjRG92TDNCcmFTNW5iMjluTDJkemNqSXZSMVJUTVU4eExtTnlkREFkQmdOVkhSRUVGakFVZ2hKaGRIUmxjM1F1WVc1a2NtOXBaQzVqYjIwd0lRWURWUjBnQkJvd0dEQUlCZ1puZ1F3QkFnSXdEQVlLS3dZQkJBSFdlUUlGQXpBdkJnTlZIUjhFS0RBbU1DU2dJcUFnaGg1b2RIUndPaTh2WTNKc0xuQnJhUzVuYjI5bkwwZFVVekZQTVM1amNtd3dnZ0VFQmdvckJnRUVBZFo1QWdRQ0JJSDFCSUh5QVBBQWR3Q2t1UW1RdEJoWUZJZTdFNkxNWjNBS1BEV1lCUGtiMzdqamQ4ME95QTNjRUFBQUFXWmREM1BMQUFBRUF3QklNRVlDSVFDU1pDV2VMSnZzaVZXNkNnK2dqLzl3WVRKUnp1NEhpcWU0ZVk0Yy9teXpqZ0loQUxTYmkvVGh6Y3pxdGlqM2RrM3ZiTGNJVzNMbDJCMG83NUdRZGhNaWdiQmdBSFVBVmhRR21pL1h3dXpUOWVHOVJMSSt4MFoydWJ5WkVWekE3NVNZVmRhSjBOMEFBQUZtWFE5ejVBQUFCQU1BUmpCRUFpQmNDd0E5ajdOVEdYUDI3OHo0aHIvdUNIaUFGTHlvQ3EySzAreUxSd0pVYmdJZ2Y4Z0hqdnB3Mm1CMUVTanEyT2YzQTBBRUF3Q2tuQ2FFS0ZVeVo3Zi9RdEl3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUk5blRmUktJV2d0bFdsM3dCTDU1RVRWNmthenNwaFcxeUFjNUR1bTZYTzQxa1p6d0o2MXdKbWRSUlQvVXNDSXkxS0V0MmMwRWpnbG5KQ0YyZWF3Y0VXbExRWTJYUEx5RmprV1FOYlNoQjFpNFcyTlJHelBodDNtMWI0OWhic3R1WE02dFg1Q3lFSG5UaDhCb200L1dsRmloemhnbjgxRGxkb2d6L0syVXdNNlM2Q0IvU0V4a2lWZnYremJKMHJqdmc5NEFsZGpVZlV3a0k5Vk5NakVQNWU4eWRCM29MbDZnbHBDZUY1ZGdmU1g0VTl4MzVvai9JSWQzVUUvZFBwYi9xZ0d2c2tmZGV6dG1VdGUvS1Ntcml3Y2dVV1dlWGZUYkkzenNpa3daYmtwbVJZS21qUG1odjRybGl6R0NHdDhQbjhwcThNMktEZi9QM2tWb3QzZTE4UT0iLCJNSUlFU2pDQ0F6S2dBd0lCQWdJTkFlTzBtcUdOaXFtQkpXbFF1REFOQmdrcWhraUc5dzBCQVFzRkFEQk1NU0F3SGdZRFZRUUxFeGRIYkc5aVlXeFRhV2R1SUZKdmIzUWdRMEVnTFNCU01qRVRNQkVHQTFVRUNoTUtSMnh2WW1Gc1UybG5iakVUTUJFR0ExVUVBeE1LUjJ4dlltRnNVMmxuYmpBZUZ3MHhOekEyTVRVd01EQXdOREphRncweU1URXlNVFV3TURBd05ESmFNRUl4Q3pBSkJnTlZCQVlUQWxWVE1SNHdIQVlEVlFRS0V4VkhiMjluYkdVZ1ZISjFjM1FnVTJWeWRtbGpaWE14RXpBUkJnTlZCQU1UQ2tkVVV5QkRRU0F4VHpFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURRR005RjFJdk4wNXprUU85K3ROMXBJUnZKenp5T1RIVzVEekVaaEQyZVBDbnZVQTBRazI4RmdJQ2ZLcUM5RWtzQzRUMmZXQllrL2pDZkMzUjNWWk1kUy9kTjRaS0NFUFpSckF6RHNpS1VEelJybUJCSjV3dWRnem5kSU1ZY0xlL1JHR0ZsNXlPRElLZ2pFdi9TSkgvVUwrZEVhbHROMTFCbXNLK2VRbU1GKytBY3hHTmhyNTlxTS85aWw3MUkyZE44RkdmY2Rkd3VhZWo0YlhocDBMY1FCYmp4TWNJN0pQMGFNM1Q0SStEc2F4bUtGc2JqemFUTkM5dXpwRmxnT0lnN3JSMjV4b3luVXh2OHZObWtxN3pkUEdIWGt4V1k3b0c5aitKa1J5QkFCazdYckpmb3VjQlpFcUZKSlNQazdYQTBMS1cwWTN6NW96MkQwYzF0Skt3SEFnTUJBQUdqZ2dFek1JSUJMekFPQmdOVkhROEJBZjhFQkFNQ0FZWXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUJJR0ExVWRFd0VCL3dRSU1BWUJBZjhDQVFBd0hRWURWUjBPQkJZRUZKalIrRzRRNjgrYjdHQ2ZHSkFib090OUNmMHJNQjhHQTFVZEl3UVlNQmFBRkp2aUIxZG5IQjdBYWdiZVdiU2FMZC9jR1lZdU1EVUdDQ3NHQVFVRkJ3RUJCQ2t3SnpBbEJnZ3JCZ0VGQlFjd0FZWVphSFIwY0RvdkwyOWpjM0F1Y0d0cExtZHZiMmN2WjNOeU1qQXlCZ05WSFI4RUt6QXBNQ2VnSmFBamhpRm9kSFJ3T2k4dlkzSnNMbkJyYVM1bmIyOW5MMmR6Y2pJdlozTnlNaTVqY213d1B3WURWUjBnQkRnd05qQTBCZ1puZ1F3QkFnSXdLakFvQmdnckJnRUZCUWNDQVJZY2FIUjBjSE02THk5d2Eya3VaMjl2Wnk5eVpYQnZjMmwwYjNKNUx6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFHb0ErTm5uNzh5NnBSamQ5WGxRV05hN0hUZ2laL3IzUk5Ha21VbVlIUFFxNlNjdGk5UEVhanZ3UlQyaVdUSFFyMDJmZXNxT3FCWTJFVFV3Z1pRK2xsdG9ORnZoc085dHZCQ09JYXpwc3dXQzlhSjl4anU0dFdEUUg4TlZVNllaWi9YdGVEU0dVOVl6SnFQalk4cTNNRHhyem1xZXBCQ2Y1bzhtdy93SjRhMkc2eHpVcjZGYjZUOE1jRE8yMlBMUkw2dTNNNFR6czNBMk0xajZieWtKWWk4d1dJUmRBdktMV1p1L2F4QlZielltcW13a201ekxTRFc1bklBSmJFTENRQ1p3TUg1NnQyRHZxb2Z4czZCQmNDRklaVVNweHU2eDZ0ZDBWN1N2SkNDb3NpclNtSWF0ai85ZFNTVkRRaWJldDhxLzdVSzR2NFpVTjgwYXRuWnoxeWc9PSJdfQ.eyJub25jZSI6IiIsInRpbWVzdGFtcE1zIjoxNTUzNzQwNjE5MDA5LCJhcGtQYWNrYWdlTmFtZSI6ImNvbS5leGFtcGxlLnNhZmV0eW5ldHRlc3QiLCJhcGtEaWdlc3RTaGEyNTYiOiJpL3ZDNmVOYUtKT1VlMGJsdmZYRktPMnBhMkMraENPUVlhVmtrTi9ldUNnPSIsImN0c1Byb2ZpbGVNYXRjaCI6dHJ1ZSwiYXBrQ2VydGlmaWNhdGVEaWdlc3RTaGEyNTYiOlsiQmdSckg5dDd5REVUN3lWKzlBMDFNL29lOWp0aENFQ1A4Q3RueEppWEVIUT0iXSwiYmFzaWNJbnRlZ3JpdHkiOnRydWV9.yhQSNUP3N86F4Pas_d43sa8GdSjhNtU_FQZvn7obOWuLnTLtpGRjzA-5YBQezQsP35bnFrZspFl5GWeHZzbcciClG-Ph_mZ9vhnLo__jf-h2SMgR2ScXQNEPavaCm9KjZsIpUi1y3skJAUbfaCNcMJSfdh0qSn3Oxdk02FO-qRhntUwwJj-_bQrszUNLo-5yCovxMr_-AjE3ENz6W7IH01JhzG7h-sHkRrzQBY9aO35NZjmCTZiTSuP9n0_vfJslz-Skh07qeQzCaqkz2JYDhwyu2spnycqIGhNDEb1i0rll7JkUj8Gp4YZCq6YcMgxqZJokTWvfcgGwx-xIjZzZzw"
var invalidSafetynetJws = "eyJhbGciOiJSUzI1NiIsIng1YyI6WyJNSUlGa2pDQ0JIcWdBd0lCQWdJUVJYcm9OMFpPZFJrQkFBQUFBQVB1bnpBTkJna3Foa2lHOXcwQkFRc0ZBREJDTVFzd0NRWURWUVFHRXdKVlV6RWVNQndHQTFVRUNoTVZSMjl2WjJ4bElGUnlkWE4wSUZObGNuWnBZMlZ6TVJNd0VRWURWUVFERXdwSFZGTWdRMEVnTVU4eE1CNFhEVEU0TVRBeE1EQTNNVGswTlZvWERURTVNVEF3T1RBM01UazBOVm93YkRFTE1Ba0dBMVVFQmhNQ1ZWTXhFekFSQmdOVkJBZ1RDa05oYkdsbWIzSnVhV0V4RmpBVUJnTlZCQWNURFUxdmRXNTBZV2x1SUZacFpYY3hFekFSQmdOVkJBb1RDa2R2YjJkc1pTQk1URU14R3pBWkJnTlZCQU1URW1GMGRHVnpkQzVoYm1SeWIybGtMbU52YlRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTmpYa3owZUsxU0U0bSsvRzV3T28rWEdTRUNycWRuODhzQ3BSN2ZzMTRmSzBSaDNaQ1laTEZIcUJrNkFtWlZ3Mks5RkcwTzlyUlBlUURJVlJ5RTMwUXVuUzl1Z0hDNGVnOW92dk9tK1FkWjJwOTNYaHp1blFFaFVXWEN4QURJRUdKSzNTMmFBZnplOTlQTFMyOWhMY1F1WVhIRGFDN09acU5ub3NpT0dpZnM4djFqaTZIL3hobHRDWmUybEorN0d1dHpleEtweHZwRS90WlNmYlk5MDVxU2xCaDlmcGowMTVjam5RRmtVc0FVd21LVkFVdWVVejR0S2NGSzRwZXZOTGF4RUFsK09raWxNdElZRGFjRDVuZWw0eEppeXM0MTNoYWdxVzBXaGg1RlAzOWhHazlFL0J3UVRqYXpTeEdkdlgwbTZ4RlloaC8yVk15WmpUNEt6UEpFQ0F3RUFBYU9DQWxnd2dnSlVNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBVEFNQmdOVkhSTUJBZjhFQWpBQU1CMEdBMVVkRGdRV0JCUXFCUXdHV29KQmExb1RLcXVwbzRXNnhUNmoyREFmQmdOVkhTTUVHREFXZ0JTWTBmaHVFT3ZQbSt4Z254aVFHNkRyZlFuOUt6QmtCZ2dyQmdFRkJRY0JBUVJZTUZZd0p3WUlLd1lCQlFVSE1BR0dHMmgwZEhBNkx5OXZZM053TG5CcmFTNW5iMjluTDJkMGN6RnZNVEFyQmdnckJnRUZCUWN3QW9ZZmFIUjBjRG92TDNCcmFTNW5iMjluTDJkemNqSXZSMVJUTVU4eExtTnlkREFkQmdOVkhSRUVGakFVZ2hKaGRIUmxjM1F1WVc1a2NtOXBaQzVqYjIwd0lRWURWUjBnQkJvd0dEQUlCZ1puZ1F3QkFnSXdEQVlLS3dZQkJBSFdlUUlGQXpBdkJnTlZIUjhFS0RBbU1DU2dJcUFnaGg1b2RIUndPaTh2WTNKc0xuQnJhUzVuYjI5bkwwZFVVekZQTVM1amNtd3dnZ0VFQmdvckJnRUVBZFo1QWdRQ0JJSDFCSUh5QVBBQWR3Q2t1UW1RdEJoWUZJZTdFNkxNWjNBS1BEV1lCUGtiMzdqamQ4ME95QTNjRUFBQUFXWmREM1BMQUFBRUF3QklNRVlDSVFDU1pDV2VMSnZzaVZXNkNnK2dqLzl3WVRKUnp1NEhpcWU0ZVk0Yy9teXpqZ0loQUxTYmkvVGh6Y3pxdGlqM2RrM3ZiTGNJVzNMbDJCMG83NUdRZGhNaWdiQmdBSFVBVmhRR21pL1h3dXpUOWVHOVJMSSt4MFoydWJ5WkVWekE3NVNZVmRhSjBOMEFBQUZtWFE5ejVBQUFCQU1BUmpCRUFpQmNDd0E5ajdOVEdYUDI3OHo0aHIvdUNIaUFGTHlvQ3EySzAreUxSd0pVYmdJZ2Y4Z0hqdnB3Mm1CMUVTanEyT2YzQTBBRUF3Q2tuQ2FFS0ZVeVo3Zi9RdEl3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUk5blRmUktJV2d0bFdsM3dCTDU1RVRWNmthenNwaFcxeUFjNUR1bTZYTzQxa1p6d0o2MXdKbWRSUlQvVXNDSXkxS0V0MmMwRWpnbG5KQ0YyZWF3Y0VXbExRWTJYUEx5RmprV1FOYlNoQjFpNFcyTlJHelBodDNtMWI0OWhic3R1WE02dFg1Q3lFSG5UaDhCb200L1dsRmloemhnbjgxRGxkb2d6L0syVXdNNlM2Q0IvU0V4a2lWZnYremJKMHJqdmc5NEFsZGpVZlV3a0k5Vk5NakVQNWU4eWRCM29MbDZnbHBDZUY1ZGdmU1g0VTl4MzVvai9JSWQzVUUvZFBwYi9xZ0d2c2tmZGV6dG1VdGUvS1Ntcml3Y2dVV1dlWGZUYkkzenNpa3daYmtwbVJZS21qUG1odjRybGl6R0NHdDhQbjhwcThNMktEZi9QM2tWb3QzZTE4UT0iLCJNSUlFU2pDQ0F6S2dBd0lCQWdJTkFlTzBtcUdOaXFtQkpXbFF1REFOQmdrcWhraUc5dzBCQVFzRkFEQk1NU0F3SGdZRFZRUUxFeGRIYkc5aVlXeFRhV2R1SUZKdmIzUWdRMEVnTFNCU01qRVRNQkVHQTFVRUNoTUtSMnh2WW1Gc1UybG5iakVUTUJFR0ExVUVBeE1LUjJ4dlltRnNVMmxuYmpBZUZ3MHhOekEyTVRVd01EQXdOREphRncweU1URXlNVFV3TURBd05ESmFNRUl4Q3pBSkJnTlZCQVlUQWxWVE1SNHdIQVlEVlFRS0V4VkhiMjluYkdVZ1ZISjFjM1FnVTJWeWRtbGpaWE14RXpBUkJnTlZCQU1UQ2tkVVV5QkRRU0F4VHpFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURRR005RjFJdk4wNXprUU85K3ROMXBJUnZKenp5T1RIVzVEekVaaEQyZVBDbnZVQTBRazI4RmdJQ2ZLcUM5RWtzQzRUMmZXQllrL2pDZkMzUjNWWk1kUy9kTjRaS0NFUFpSckF6RHNpS1VEelJybUJCSjV3dWRnem5kSU1ZY0xlL1JHR0ZsNXlPRElLZ2pFdi9TSkgvVUwrZEVhbHROMTFCbXNLK2VRbU1GKytBY3hHTmhyNTlxTS85aWw3MUkyZE44RkdmY2Rkd3VhZWo0YlhocDBMY1FCYmp4TWNJN0pQMGFNM1Q0SStEc2F4bUtGc2JqemFUTkM5dXpwRmxnT0lnN3JSMjV4b3luVXh2OHZObWtxN3pkUEdIWGt4V1k3b0c5aitKa1J5QkFCazdYckpmb3VjQlpFcUZKSlNQazdYQTBMS1cwWTN6NW96MkQwYzF0Skt3SEFnTUJBQUdqZ2dFek1JSUJMekFPQmdOVkhROEJBZjhFQkFNQ0FZWXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUJJR0ExVWRFd0VCL3dRSU1BWUJBZjhDQVFBd0hRWURWUjBPQkJZRUZKalIrRzRRNjgrYjdHQ2ZHSkFib090OUNmMHJNQjhHQTFVZEl3UVlNQmFBRkp2aUIxZG5IQjdBYWdiZVdiU2FMZC9jR1lZdU1EVUdDQ3NHQVFVRkJ3RUJCQ2t3SnpBbEJnZ3JCZ0VGQlFjd0FZWVphSFIwY0RvdkwyOWpjM0F1Y0d0cExtZHZiMmN2WjNOeU1qQXlCZ05WSFI4RUt6QXBNQ2VnSmFBamhpRm9kSFJ3T2k4dlkzSnNMbkJyYVM1bmIyOW5MMmR6Y2pJdlozTnlNaTVqY213d1B3WURWUjBnQkRnd05qQTBCZ1puZ1F3QkFnSXdLakFvQmdnckJnRUZCUWNDQVJZY2FIUjBjSE02THk5d2Eya3VaMjl2Wnk5eVpYQnZjMmwwYjNKNUx6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFHb0ErTm5uNzh5NnBSamQ5WGxRV05hN0hUZ2laL3IzUk5Ha21VbVlIUFFxNlNjdGk5UEVhanZ3UlQyaVdUSFFyMDJmZXNxT3FCWTJFVFV3Z1pRK2xsdG9ORnZoc085dHZCQ09JYXpwc3dXQzlhSjl4anU0dFdEUUg4TlZVNllaWi9YdGVEU0dVOVl6SnFQalk4cTNNRHhyem1xZXBCQ2Y1bzhtdy93SjRhMkc2eHpVcjZGYjZUOE1jRE8yMlBMUkw2dTNNNFR6czNBMk0xajZieWtKWWk4d1dJUmRBdktMV1p1L2F4QlZielltcW13a201ekxTRFc1bklBSmJFTENRQ1p3TUg1NnQyRHZxb2Z4czZCQmNDRklaVVNweHU2eDZ0ZDBWN1N2SkNDb3NpclNtSWF0ai85ZFNTVkRRaWJldDhxLzdVSzR2NFpVTjgwYXRuWnoxeWc9PSJdfQ.eyJub25jZSI6InRhbXBlcmVkIiwidGltZXN0YW1wTXMiOjE1NTM3NDA2MTkwMDksImFwa1BhY2thZ2VOYW1lIjoiY29tLmV4YW1wbGUuc2FmZXR5bmV0dGVzdCIsImFwa0RpZ2VzdFNoYTI1NiI6ImkvdkM2ZU5hS0pPVWUwYmx2ZlhGS08ycGEyQytoQ09RWWFWa2tOL2V1Q2c9IiwiY3RzUHJvZmlsZU1hdGNoIjp0cnVlLCJhcGtDZXJ0aWZpY2F0ZURpZ2VzdFNoYTI1NiI6WyJCZ1JySDl0N3lERVQ3eVYrOUEwMU0vb2U5anRoQ0VDUDhDdG54SmlYRUhRPSJdLCJiYXNpY0ludGVncml0eSI6dHJ1ZX0.yhQSNUP3N86F4Pas_d43sa8GdSjhNtU_FQZvn7obOWuLnTLtpGRjzA-5YBQezQsP35bnFrZspFl5GWeHZzbcciClG-Ph_mZ9vhnLo__jf-h2SMgR2ScXQNEPavaCm9KjZsIpUi1y3skJAUbfaCNcMJSfdh0qSn3Oxdk02FO-qRhntUwwJj-_bQrszUNLo-5yCovxMr_-AjE3ENz6W7IH01JhzG7h-sHkRrzQBY9aO35NZjmCTZiTSuP9n0_vfJslz-Skh07qeQzCaqkz2JYDhwyu2spnycqIGhNDEb1i0rll7JkUj8Gp4YZCq6YcMgxqZJokTWvfcgGwx-xIjZzZzw"
var hmsJws = "eyJhbGciOiJSUzI1NiIsIng1YyI6WyJNSUlGRmpDQ0F2NmdBd0lCQWdJU0lCa1JCQlpJUXpNRTFjejJoQnlmalFFUk1BMEdDU3FHU0liM0RRRUJDd1VBTUdNeEN6QUpCZ05WQkFZVEFrTk9NUTh3RFFZRFZRUUtEQVpJZFdGM1pXa3hFekFSQmdOVkJBc01Da2gxWVhkbGFTQkRRa2N4TGpBc0JnTlZCQU1NSlVoMVlYZGxhU0JEUWtjZ1FYQndiR2xqWVhScGIyNGdTVzUwWldkeVlYUnBiMjRnUTBFd0hoY05NVGt4TVRBME1EZzBPRFF6V2hjTk1qa3hNVEF4TURnME9EUXpXakIxTVFzd0NRWURWUVFHRXdKRFRqRVBNQTBHQTFVRUNoTUdTSFZoZDJWcE1Ta3dKd1lEVlFRTEV5QklkV0YzWldrZ1EwSkhJRU5zYjNWa0lGTmxZM1Z5YVhSNUlGTnBaMjVsY2pFcU1DZ0dBMVVFQXhNaGMzbHphVzUwWldkeWFYUjVMbkJzWVhSbWIzSnRMbWhwWTJ4dmRXUXVZMjl0TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFpenArQmtVS0JwN1F1ZVFEakNYalNHTUNuNGhRc1BocGVvdGw0M2pRcWg2Znk5cmRteHdBemJyaUlOKzFMeSt0aWZkV29pTWRpZjJYZjFIT016ZUEycnlVbDVhRllrRnNwRk1FeU9aL3RlNTFZZnJsUDRBK0phOUZTbXBQTEZ1dzFzMmpNVGxlVVZMSU0wam10U0E4RkFKd3JPbzFBL1FNNHY5UE5nNDNycjZ1WC9IN0VNK3g2OFdaNmVVZHUvMDRWeUlkSnJIb2s4QWFDUWZncWpzc1plZ2h1RHJYNmtaNUNrY2JvZkN4NW0rWkY4cnowZDdKTS9ZWEFBQlFNemtXYWRsd2tmR3BTRFVpYkxmeTljZ2h5SkZmZXZlRkFDWUtYSlBnTXM3ZFVpM283WmthRWgyYVYreWYrRS8wMWxmUWg4RUFyWi9lamtrbDZ3ZldxOUh6WVFJREFRQUJvNEd4TUlHdU1COEdBMVVkSXdRWU1CYUFGT0hJL3dGekJxSGdYaE1PV3FlZTYzL1huaHVJTUIwR0ExVWREZ1FXQkJRbm1JNXpVM3NxRkljVTY3YnJya3ZjU045eUJqQUxCZ05WSFE4RUJBTUNBNmd3UUFZRFZSMGZCRGt3TnpBMW9ET2dNWVl2YUhSMGNEb3ZMMk55YkM1amJHOTFaQzVvZFdGM1pXa3VZMjl0TDBoMVlYZGxhVU5DUjBoQlNXTnliQzVqY213d0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUFWNlZyeUExSnlCczJNcFI1ZTgrOWVIaHZvYlNzZWU1ZERCc01GVFZtRXNQMm9jKzQwSmQ2KysydXBtSm5sRk1vTm9MOTl6bnEwR3dGYkMrRW9laVJ2cE9wcTExYU15blVLYXZFQUxIRWxyTi9LZ05zMHVGWlQyblJMc1FVNEw3Y0VtTmpoZkNzcjFqbkR6QnYrbGdNUUdiZUl6VDhPUUVPRFBzOHh0V1MvU2hNbi96NTlNQ0d3NEViMWFObWhrZUhpUmJEdTFLb3E5Qnl6eWVKWE5yeDRSOEttZVlBc0h3Tmd2T25CN2pidFJ3UmNEVFI2MEFCUGRkV0pFVmhFWDd6QXUwVjRzR0VlTXUxemxHRnoySVJ4bzVSdnlmTVZMOEpQdFJnUTZaNFVsT1JFV0hMam0ybTMvZ3JSSlZQa1MrQ2k0RTFMUEkrSVJldjlHR2hJV2JpdDZmdEwyMDQxM1hQRldvNVBiaytqYS80Lzc3eU1RcE9kRlN6UjlZUEkwQUtvSlVkcHR2WU4rbUYwVm9PR29sTXQ0em5TeWtteFpSTXJDcjVFUy96K0w4aXdiK0d6ZTZ5NjJJYVNCOGFZS1BSS1FlSjZ5TFpWVm9ObklMczZkTEYveC9hT3g1YnJUcTVrWTF0b2RGWDlrRk9WRUxVaTRwcjYxQUxhcnVneDR1c0VpMlVMRXZiQnc5UXNHZWFRL2F4ZEFPc2grczQzUjNRSUFDT2FvbUlLakhuVFJHQXR5QzdBUXNzNVlReWc3QWpMYmJ6T0N6TzZxaktpVTNkUlNDcUp4U0ZjMEU0bk02dzhTN2hNZ1FlWEhOT2gxN2QxVEd5SVdUK0pyTWFaYmdXZU1vMTdvTXNnUGhpMTRJeW1Rd3ZoQXptRHl4a2Z0RU5zMUVobTdCcy85QT09IiwiTUlJRi9UQ0NBK1dnQXdJQkFnSUlJUVYxQ1U1YnZFTXdEUVlKS29aSWh2Y05BUUVMQlFBd1VERUxNQWtHQTFVRUJoTUNRMDR4RHpBTkJnTlZCQW9NQmtoMVlYZGxhVEVUTUJFR0ExVUVDd3dLU0hWaGQyVnBJRU5DUnpFYk1Ca0dBMVVFQXd3U1NIVmhkMlZwSUVOQ1J5QlNiMjkwSUVOQk1CNFhEVEU0TURFek1EQTNOREkxT1ZvWERUTTRNREV5TlRBM05ESTFPVm93WXpFTE1Ba0dBMVVFQmhNQ1EwNHhEekFOQmdOVkJBb01Ca2gxWVhkbGFURVRNQkVHQTFVRUN3d0tTSFZoZDJWcElFTkNSekV1TUN3R0ExVUVBd3dsU0hWaGQyVnBJRU5DUnlCQmNIQnNhV05oZEdsdmJpQkpiblJsWjNKaGRHbHZiaUJEUVRDQ0FpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTUNDVVV2akw1b1hUaFV4RmtsTFhiTE5rZkh0anM4cmxPVDNoUkUzVm1pY0k3TEZKWEdNQ0J5QjdPUnVjR0RTdHdJTUgxYWMxcG5Cc1YyZGFidVFqMFdpWGJZdFJENDRJeENOODc5UkpCRnJ5OUFWN1B5cFlyeHVjRnFnZXF0MTlQcFNwU01hNFJPQnhBeVZScTlGNm02SFdsQlR0bExYdkg5eUFiUE9wK3J2YUVkNUxEN01Oc1ZGT1hlTVZCb1J1aG94b2hyQUlCM3B6d0FqWDhmV1NvZThWcno2RjNMQUlWSEUxQ3pFbjBzRlV0S0l1V1ZtMWwxY0dObHNNZVV3U013ajhQQnRUTmI5SVFhTlRzQTJxZ3VRZ2tkUGFEZGEwRU5nL0ZJWjJ6SHpWOWw0azdTcnBGdnFTZGUwc0VEUjltU2ZJZUozeDVwQVRKcDI1WDVLMStab0ZaUmE3c1FITVdBNkhPWXdmcUJYeFFtSzBwRVR6akI1elZmWFFMbkRQMFRxSzF4Y1M4WDZqSnV2a201RjY5MW51N3lwZm1aeDBSTlBUbkZaaU5PeitRZHprbG0xQkpIbG1OSVZiRmtlNnFIVUhPQlg1N0VBc3UySHVta1dXeXFRME1hWGNwdXVMTWRVM09aNnZ0b1NzWWV2TmhONFlwbTJ2MFpyM0ZDU2pnbldBd1UwMk1OUk9NQ0JDUmF6dDR0eEoxdEVZbm11MEJkNXFMSlhGV2MxendlUDUyWFM2QnFlRlJZYjUwTTVPL0FRSTVzWHNPMTBmV04wNWplelM3akR6cWphcjdQWU5HSHV1WTZjTzVRVm84L3Q5dC9zWjh2SE4rK0V0MkJ6TUttNW4xMVlNNnRQSlpLS3BMMEYrWkJhM3FnRU1Gb054d2Nrdm5tVDc5RDVBZ01CQUFHamdjY3dnY1F3SHdZRFZSMGpCQmd3Rm9BVXFzVFRlVWZvYmlOcjcvQ3BiQ0p6UFhvWmFhRXdIUVlEVlIwT0JCWUVGT0hJL3dGekJxSGdYaE1PV3FlZTYzL1huaHVJTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RGdZRFZSMFBBUUgvQkFRREFnRUdNR0VHQTFVZEh3UmFNRmd3VnFCVW9GS0dVR2gwZEhBNkx5OWpjR3RwTFdOaGQyVmlMbWgxWVhkbGFTNWpiMjB2WTNCcmFTOXpaWEoyYkdWMEwyTnliRVpwYkdWRWIzZHVMbU55YkQ5alpYSjBlWEJsUFRFbUwzSnZiM1JqY213dVkzSnNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUURQeE1YY3IxbExiZFBIZm9uY2IvUXpRcFJDUXgvRVlkN2MvN1ZVS2FUWFY4azRKUTJaMGhITlBQSHlqVThNa1BnNzY0ZCtVQ2NPTWtJK1BCK3pYWUtldW1Rc1drczJZUkhRUWE5M2JMQU9OUG8wWjhiL3I5Zmpya2xDRXhKVDNrQTJxVGhSQTRCRWZsNFd5ZEZTNEoya3BkVEZ4dFNiTUk3N0RFbGx5RjhMMU5uNW1xS0NYZ1pHQTNnNnZna3hCTS9nTGFBcFY5L01nMlFFaFRWOVdBNzgrZkNiZ0dWTENZRUxydnVjK01LbGpiQm5PSW9qNDl0ejhWVWJqb0ZKRDZBY0NCZTAwcWJlY0RqdngzMUVSc2t6aVdNcytQWjRvTnAyek1kc2EzQnJFL3ZBTmxFYnRUaWdtVEhNb3JhMzZ0RUwxSlgxY0t1K1NvN0k2ZnlrbXNQWkEza2VESHA4dHJlTGI0S2NiRHBMY3FBdTRWOHZNcUo4dEZVNmlsaDY1SE9BVFd6K2cvakVwTVBadWlOK3FqU1luREZ4enRzOW1XRVJzU0cwMDNTNnlnOVpuZWhjQTNpUlZOUFpaOGhTWlpIMFlLTnF4cGRhL1RSNlA1cVhpSFJBNkErTWRvQk9FNEhtdVV5M1FGVjd6WWw1c25SNlNtckRmVm10c3l6OGFNcWlmeDRnc1ZWMk01L293djhIM2JVZE9kNVJia0toek9TMlBtZXAwYmJ3V1JGVXJXdVErNWNpMkxMa1p5SXQ5ZmZOUjhXOWdibVpPWlpUcndTRlJJVDFRNDMzTk96Q1FORGpLd25la0dBeDhvNzQ2dHFxWnhHQ1hneTJNYUlJcXZhamhOdzlEcjNOQlE4emlXeXFhUUJrMlJyQ1doNlErK1NkMGI1TDNSd0hyUT09Il19.eyJhcGtDZXJ0aWZpY2F0ZURpZ2VzdFNoYTI1NiI6WyJHdzB4UVFFeDhOSEowVGw3dzJQRC8rU3V4ZlFQNjM0cGhtd1k0ODMyd0lnPSJdLCJhcGtEaWdlc3RTaGEyNTYiOiJFdE8yMXVlZUYyNHlxZDdxTTJhOGg5SU5OUmgzR2lKTytiQ2I0TVgvSEJJPSIsImFwa1BhY2thZ2VOYW1lIjoiY29tLndvbmduYWkuYW5kcm9pZCIsImJhc2ljSW50ZWdyaXR5Ijp0cnVlLCJub25jZSI6IlUyRnRjR3hsTVRVNE5qa3pNakk1T1RVMk1RPT0iLCJ0aW1lc3RhbXBNcyI6MTU4NjkzMjMwMDE1N30=.M0BkAYnOWeNoGxsaFYAQ7esXlVswgjhZ3KnXkZUJjuOQShBnHTQRCQmD6y9y-j7Q3c_6Pjium50l6ulvX0qkR4A1fjbLwGc71a5COwyUzE7lFqG8INAfQoz_v2VEkMXEnKcx5A6g_qAvSt62cUf6jmkn3csOW3jz7fCaYQtcyC482WrrLvRKwhRuFhGBz3YpCFEjxZvq5JoYWo0ahwNSrhm5903B65scMwdg7fB8vvJRdH-eSNIxaMypSuCoopF1mZf3DyT7UvrLA51rr3l2RZl-GG0cCrRbOoKLdOe2eGSj_3ZwQUC9T0jvOAxySdhuCBapmgc5KtfVYxcU-4U3Mg=="

func TestValidate(t *testing.T) {
	t.Run("safetynet pass", func(t *testing.T) {
		safetynet.TimeFunction = func() time.Time {
			return time.Date(2019, 5, 1, 0, 0, 0, 0, time.FixedZone("UTC", 0))
		}

		assert := assert.New(t)
		attestation, err := safetynet.Validate(safetynetJws)
		assert.NoError(err)
		assert.Equal(int64(1553740619009), attestation.Timestamp)
		assert.Equal(int64(1553740619009000000), attestation.GetTimestamp().UnixNano())
		assert.Equal("", attestation.Nonce)
		assert.Equal("com.example.safetynettest", attestation.ApkPackageName)
		assert.Equal("i/vC6eNaKJOUe0blvfXFKO2pa2C+hCOQYaVkkN/euCg=", attestation.ApkDigestSHA256)
		assert.Equal([]string{"BgRrH9t7yDET7yV+9A01M/oe9jthCECP8CtnxJiXEHQ="}, attestation.ApkCertificateDigestSHA256)
		assert.Equal("", attestation.Error)
		assert.Equal(true, attestation.CTSProfileMatch)
		assert.Equal(true, attestation.BasicIntegrity)
		assert.Equal(safetynet.VendorGMS, attestation.Vendor)
	})

	t.Run("safetycheck pass", func(t *testing.T) {
		safetynet.TimeFunction = func() time.Time {
			return time.Date(2020, 4, 15, 0, 0, 0, 0, time.FixedZone("UTC", 0))
		}

		assert := assert.New(t)
		attestation, err := safetynet.Validate(hmsJws)
		assert.NoError(err)
		assert.Equal(int64(1586932300157), attestation.Timestamp)
		assert.Equal(int64(1586932300157000000), attestation.GetTimestamp().UnixNano())
		assert.Equal("U2FtcGxlMTU4NjkzMjI5OTU2MQ==", attestation.Nonce)
		assert.Equal("com.wongnai.android", attestation.ApkPackageName)
		assert.Equal("EtO21ueeF24yqd7qM2a8h9INNRh3GiJO+bCb4MX/HBI=", attestation.ApkDigestSHA256)
		assert.Equal([]string{"Gw0xQQEx8NHJ0Tl7w2PD/+SuxfQP634phmwY4832wIg="}, attestation.ApkCertificateDigestSHA256)
		assert.Equal("", attestation.Error)
		assert.Equal(true, attestation.BasicIntegrity)
		assert.Equal(safetynet.VendorHMS, attestation.Vendor)
	})

	t.Run("fail", func(t *testing.T) {
		_, err := safetynet.Validate(invalidSafetynetJws)
		assert.Error(t, err)
	})
}
